/*
 p.182
 	배열
 	1) 저장된 데이터가 많은 경우 문제점
 		-변수명이 많이 존재해서 관리가 어렵다.
 		=>한개의 이름으로 모든 변수를 관리할 수 있게 만든다.
 		=>데이터를 묶어서 사용한다. (데이터를 묶어서 사용하는 방식: 배열, 클래스)
 		  =배열 : 같은 데이터형을 묶어서 사용하는 것
 		  =클래스 : 다른 데이터형을 묶어서 사용하는 것
 		  
 		  -변수 (한개로 저장) -> 배열 -> (구조체) -> 클래스
 		                           (자바에는 구조체 없음,  C/C++에는 구조체가 있다)
 		  -명령문( ';'이 있는 경우에 명령 한개가 종료된다)을 모아서 처리하는 것 (=메소드)
 		  
 		  -배열, 변수, 메소드를 하나로 모은 것 (=클래스)
 	
 	2) 배열 
 		ex) 1차원 배열, 2차원 배열, 3차원 배열, 4차원 배열, 가변 배열
 		자바에서는 1차원 배열만 사용한다. (웹상에서는 1차원 배열만 존재한다)
 		-배열의 단점: 가변형이 아닌 고정형이다. 같은 데이터형만 모아서 사용할 수 있다. 
 				  데이터 수정은 가능, 삭제는 불가
 				  => 단점을 보완하기 위해 컬렉션을 만들었다. (컬렉션: 가변형 데이터, 웹에서 기본이 된다)
 				  
 				  컬렉션 
 				  ex) List : 순서가 있다, 중복을 허용한다.
 				  			Set : 순서가 없다, 중복을 허용하지 않는다.
 				  			Map : Key, value를 동시에 저장한다. 
 				  				  Key, value값을 받아서 => JSON 파일로 넘겨줌 (모바일과 서버 연결)
 				  				  
 		배열의 사용처: 같은 유형의 데이터가 3개 이상 (=배열)
 		
 	3) 배열 선언
 	1/ 데이터형[] 배열명;   예) int[] arr; => 저장할 수 있는 데이터: byte, short, char, int (int이하는 모두 저장가능)
 	   =============	   byte[] arr;
 	   	 => 권장사항		   char[] arr;
					 	   long[] arr;
					 	   double[] arr;
					 	   boolean[] arr;
					 	          ===
					 	          여러개의 데이터를 한번에 저장 => arr이라는 이름으로 모든 데이터를 제어한다.
					 	   
 	2/ 데이터형 배열명[];   예) char arr[];
 	   ==============
 	   => c언어 호환
 	   
 	4) 배열 초기화
 		1/ 선언과 동시에 배열의 초기화를 할 수 있다.
 		   int[] arr={1,2,3,4,5}; => 5개의 데이터를 한번에 저장한다
 		2/ 선언 후 나중에 값을 채운다.
 		   ==================== 보통 사용되는 방식
 		   int[] arr=new int[5]; => 5개의 데이터가 0으로 초기화된다.
 		   					=== 저장갯수는 반드시 적어줘야 한다. 적지않으면 오류발생!
 		=> 메모리에 배치될때 일반 변수와 다르다.
 		   **배열은 연속적인 메모리 공간을 가지고 있다. => index번호를 이용해서 처리
 		     연속적으로 배치된다.
 		   
 		   int[] arr;
 		   ========= 공간 이름이 arr
 		   
 		   arr=new int[5];
 		   ======arr========= 
 		        100
 		   ===================
 		   
 		   =========================================
 		       0     |   0    |   100   |    0   |  0
 		   =========================================
 		   100번지  104번지   108번지   112번지     116번지
 		   arr+0   arr+1    arr+2    arr+3     arr+4
 		           +1(4byte) 100+8   100+12    100+16
 		   arr[0]  arr[1]   arr[2]  arr[3]     arr[4] => 일반변수와 동일
 		   
 		   arr[2]=100;
 		   
 		   각 데이터 저장 위치마다 번호가 부여된다 (=인덱스, 첨자)
 		   인덱스번호는 0부터 시작한다.
 		   인덱스번호를 초과하면 ArrayIndexOutOfBoundsException 오류가 발생한다. (프로그래머의 실수로 인한 오류)
 		   
 		   
 	5) 배열 데이터 출력
 	   => for, for~each문
 	   int[] arr={10,20,30,40,50}; => 연속적으로 값 5개를 저장한다.
 	   			 ================
 	   			 arr[0] arr[1] arr[2] arr[3] arr[4] ==> index번호는 arr.length-1이다.
 	   			 
 	   -일반 for문
 	   for(int i=0;i<=4;i++)
 	   {
 	   	System.out.println(arr[i]);
 	   }
 	   => index 번호 이용, 배열에 저장된 데이터를 변경할 수 있다. (출력, 데이터값 변경이 모두 가능하다)
 	   
 	   -for~each구문 (향상된 for문)
 	   => 출력만 담당한다 (데이터값 변경, 데이터 추가가 불가능하다)
 	      웹, 모바일에서 많이 사용된다.
 	      데이터는 자바로 다루고, 결과값만 브라우저에 전송한다. (출력만 한다) => JSP에서 for~each구문을 많이 씀.
 	    
 	    형식)
 	    	for(데이터형 변수명:배열명)
 	    	
 	    	예) int[] arr={10,20,30,40,50};
 	    	    for(int a:arr)
 	    	        =====
 	    	    {    ==> int a는 실제 배열에 저장된 데이터값을 가지고 온다. (인덱스를 사용하지 않는다)
 	    	            int가 아닌 long,float,double로도 받을 수 있다. (같거나 큰 데이터형으로 받을 수 있다)
 	    	    }
 	   			 
 	6) 배열의 값 변경
 		int[] arr={10,20,30,40,50};
 							=== 100으로 값을 변경하고 싶은 경우
 		
 		arr[3]=100 => 일반 변수와 값을 변경하는 방법이 동일하다.
 		
 		===> 클래스를 한 개의 이름으로 처리 (배열이 아니고, 인터페이스를 사용한다)
*/
public class 자바배열1 {
/*
	public static void main(String[] args) throws Exception{
		// TODO Auto-generated method stub
		Runtime.getRuntime().exec("C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe http://daum.net");
		//익스플로러를 띄우고, 뒤의 링크로 이동한다.
	}
	*/
	
	public static void main(String[] args) throws Exception{
		// 1. 배열선언
		int[] arr=new int[5]; // 연속적으로 메모리에 5개의 정수를 저장한다.
		System.out.println(arr); // arr는 주소값
		
		//자바의 저장공간은 3개: method영역 (메소드주소, static), stack영역 (지역변수, 매개변수 저장), heap영역 ()
		// stack영역: 메모리에서 자체처리. 블록이 종료되면 자동으로 해제된다 (변수가 없어진다) => 주소값이 저장되는 곳
		// heap영역: new 사용 시 새로운 메모리 할당, 메모리가 해제되지 않는다.=> 실제데이터가 저장되는 곳 (직접 메모리를 해제해야 함) => GC() : Garbage Collection
		
		
		// 2. 데이터를 변경 (for~each문 출력전용이므로 사용불가) => 일반 for문을 사용한다 (배열의 index번호를 이용한다)
		// length => 배열 선언 시 등록된 개수 => 5
		for(int i=0;i<arr.length;i++)
		{
			arr[i]=(int)(Math.random()*100)+1; //1~100 사이의 값으로 변경한다.
		}

		// 3. 출력 전용
		for(int a:arr) // for~each문
		{
			System.out.println(a); // 0값으로 초기화 되어있다.
		}
		
		// 데이터를 변경한 후 출력
		
		/*
		 	new를 사용하게 되면 자동으로 초기화된다.
		 	byte ==> 0으로 초기화된다.
		 	short ==> 0으로 초기화된다.
		 	int ==> 0으로 초기화된다.
		 	long ==> 0L으로 초기화된다.
		 	float => 0.0F
		 	double => 0.0
		 	char => 공백으로 초기화 ' '
		 	boolean => false로 초기화
		 */
	}

}
